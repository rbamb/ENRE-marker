import jsonfrom django.core.management.base import BaseCommand, CommandErrorfrom project.models import Project, File, Entity, Relationfrom project.views import build_entity, build_relationclass Command(BaseCommand):    help = 'Export a project\'s data'    def add_arguments(self, parser):        parser.add_argument('pid', type=int)        parser.add_argument('out_dir', type=str)    def handle(self, *args, **options):        pid = options['pid']        try:            proj = Project.objects.get(pid=pid)        except Project.DoesNotExist:            raise CommandError(f'Project with pid {pid} does not exist')        print(f'Working on project with pid={pid} and name={proj.p_name}')        files = File.objects.filter(pid=proj)        e_list = []        eid_map = dict()        print('Exporting entities...')        for entity in Entity.objects.filter(fid__in=files, shallow=False) \                .exclude(reviewed=Entity.ReviewedOption.remove):            eid_map[entity.eid] = len(e_list)            tmp = build_entity(entity, out=True).to_dict()            tmp['eid'] = len(e_list)            e_list.append(tmp)        r_list = []        print('Exporting relations...')        for relation in Relation.objects.filter(from_entity__fid__in=files, shallow=False) \                .exclude(reviewed=Relation.ReviewedOption.remove):            tmp = build_relation(relation, out=True).to_dict()            # Map internal entity id to 0-based independent id            tmp['eFrom'] = eid_map[tmp['eFrom']]            tmp['eTo'] = eid_map[tmp['eTo']]            r_list.append(tmp)        out_dir = options['out_dir']        print('Writing results to file...')        with open(f'{out_dir}/{proj.p_name}_entity.json', 'w') as f:            json.dump(e_list, f, indent=4)        with open(f'{out_dir}/{proj.p_name}_relation.json', 'w') as f:            json.dump(r_list, f, indent=4)        self.stdout.write(self.style.SUCCESS(            f'Successfully export {len(e_list)} entity(s) and {len(r_list)} relation(s) of project with pid {pid} and name {proj.p_name}'        ))